import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

public class main {

    public static void main(String[] args) {

        ArrayList<Integer> nodes = new ArrayList<>();
        nodes.add(-1);
        int depth = -1;
        int firstElement = 0;
        int max = -1;
        int node = 1;
        int counter = 0;

        int bound = 1;

        int leftSide = 1;
        int rightSide = 3;
        int sumsNodes = 1;

        String character = "";


        try {
            File myObj = new File("deneme.txt");
            Scanner scanner = new Scanner(myObj);
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                depth++;
                for (int i = 0; i < line.length(); i++) {
                    int number = 0;
                    if (line.charAt(i) != ' ') {
                        character += line.charAt(i);
                    }
                    if (line.charAt(i) == ' ' || i==line.length()-1){
                        number = Integer.parseInt(character);
                        //System.out.println("node : " + node + " , number : " + number + " , sumsNodes : " + sumsNodes);

                        if (leftSide == sumsNodes){
                            if (firstElement==0){
                                nodes.add(number);
                                firstElement++;
                            }
                            else{
                                if (!isPrime(number)){
                                    if (nodes.get(sumsNodes/2) == 0){
                                        nodes.add(0);
                                    }
                                    else{
                                        nodes.add(nodes.get(sumsNodes/2) + number);
                                    }

                                }
                                else{
                                    nodes.add(0);
                                }
                            }
                            node++;
                            sumsNodes++;
                            leftSide = (int)Math.pow(2,depth+1);
                        }
                        else if(rightSide == sumsNodes){
                            //System.out.println("deneme : " + nodes.get(sumsNodes/2));
                            //System.out.println("node : " + node + " , number : " + number + " , sumsNodes : " + sumsNodes);
                            //System.out.println((int)(Math.pow(2,depth)));
                            if (!isPrime(number)){
                                if (nodes.get(sumsNodes-(int)(Math.pow(2,depth)))== 0){
                                    nodes.add(0);
                                }
                                else{
                                    nodes.add(nodes.get(sumsNodes-(int)(Math.pow(2,depth))) + number);
                                }
                            }
                            else{
                                nodes.add(0);
                            }
                            node++;
                            sumsNodes++;
                            rightSide += Math.pow(2,depth+1);
                        }
                        else{
                            bound+=2;
                            if (!isPrime(number)){
                                System.out.println("node : " + node + " , number : " + number + " , sumsNodes : " + sumsNodes + " , bound : " + bound);
                                for(int j = sumsNodes-bound;j<(sumsNodes-bound+depth);j++){
                                    //System.out.println(j);
                                    if (nodes.get(j) == 0){
                                        nodes.add(0);
                                        //System.out.println(" added : 0 ");
                                    }
                                    else{
                                        //System.out.println(" get j : " + nodes.get(j));
                                        nodes.add(nodes.get(j) + number);
                                    }

                                }
                            }
                            else{
                                //System.out.println("node : " + node + " , number : " + number + " , sumsNodes : " + sumsNodes + " , bound : " + bound);
                                for(int j = sumsNodes-bound;j<(sumsNodes-bound+depth);j++){
                                    nodes.add(0);
                                    //System.out.println(" else added : 0 ");
                                }
                            }
                            node++;
                            sumsNodes+=depth;
                        }
                        character = "";
                    }
                }



            }
            scanner.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        for (int i : nodes)
            System.out.println(i);


        for(int i = nodes.size()-1;i>=0;i--){
            counter++;
            if (nodes.get(i) > max){
                max = nodes.get(i);
            }
            if (counter==(Math.pow(2,depth)) && max == 0){
                max = -2;
                depth--;
            }
            else if(counter==(Math.pow(2,depth)) && max != 0 ){
                break;
            }
        }

        System.out.println("The Maximum Number is : " + max);



    }

        public static boolean isPrime (int number){

                if (number == 1) {
                    return false;
                }

                for (int i = 2; i < (number / 2) + 1; i++) {
                    if (number % i == 0)
                        return false;
                }

                return true;
            }

        }


